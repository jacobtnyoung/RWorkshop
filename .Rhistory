y <- seq( 1, 5, 1 )
# Create the empty object x
x <- NULL
# Write and execute loop
for( i in 1:5 ){
x[i] <- y[i]^2 + y[i]
}
# print the result
print( x.new )
# Create y
y <- seq( 1, 5, 1 )
# Create the empty object x
x <- NULL
# Write and execute loop
for( i in 1:y ){
x[i] <- y[i]^2 + y[i]
}
# print the result
print( x.new )
require( knitr )
require( rmarkdown )
require( here )
require( knitr )
require( rmarkdown )
require( here )
render( here( "index.Rmd" ), "html_document" )
# Note that these are in the /topics folder
render( here( "topics/R-basics.Rmd" )            , "html_document" )
render( here( "topics/R-working-with-data.Rmd" ) , "html_document" )
render( here( "topics/R-programming.Rmd" )       , "html_document" )
render( here( "topics/R-data-visualization.Rmd" ), "html_document" )
render( here( "topics/R-data-example.Rmd" )      , "html_document" )
render( here( "topics/R-markdown.Rmd" )          , "html_document" )
render( here( "topics/R-shiny.Rmd" )             , "html_document" )
render( here( "topics/R-schedule.Rmd" )          , "html_document" )
rm( list = ls() )
library( networkD3 )
library( dplyr )
# Get the data file.
path <- "/Users/jyoung20/Desktop/"
RH.dat <- read.csv( paste0(path, "custody_flow.csv"), as.is = TRUE, header = TRUE )
RH.dat
cust1 <- Rh.dat$Max
# ################################################### #
# This file creates the sanky plot for the RH data.
# ################################################### #
# Libraries.
rm( list = ls() )
library( networkD3 )
library( dplyr )
# Get the data file.
path <- "/Users/jyoung20/Desktop/"
RH.dat <- read.csv( paste0(path, "custody_flow.csv"), as.is = TRUE, header = TRUE )
collapsed_var <- paste0(RH.dat$Min, RH.dat$Med, RH.dat$Close, RH.dat$Max)
collapsed_var
cust1 <- collapsed_var
cust1[collapsed_var == "1000" ] <- "Min"
cust1
collapsed_var1 <- paste0(RH.dat$Min, RH.dat$Med, RH.dat$Close, RH.dat$Max)
cust1 <- collapsed_var1
cust1[collapsed_var1 == "1000" ] <- "Min"
cust1[collapsed_var1 == "0100" ] <- "Med"
cust1[collapsed_var1 == "0010" ] <- "Close"
cust1[collapsed_var1 == "0001" ] <- "Max"
cust1
table(close1)
table(cust1)
collapsed_var2 <- paste0(RH.dat$Min_6, RH.dat$Med_6, RH.dat$Close_6, RH.dat$Max_6)
collapsed_var2
collapsed_var1 <- paste0(RH.dat$Min, RH.dat$Med, RH.dat$Close, RH.dat$Max)
cust1 <- collapsed_var1
cust1[collapsed_var1 == "1000" ] <- "Min"
cust1[collapsed_var1 == "0100" ] <- "Med"
cust1[collapsed_var1 == "0010" ] <- "Close"
cust1[collapsed_var1 == "0001" ] <- "Max"
collapsed_var2 <- paste0(RH.dat$Min_6, RH.dat$Med_6, RH.dat$Close_6, RH.dat$Max_6)
cust2 <- collapsed_var2
cust2[collapsed_var2 == "1000" ] <- "Min"
cust2[collapsed_var2 == "0100" ] <- "Med"
cust2[collapsed_var2 == "0010" ] <- "Close"
cust2[collapsed_var2 == "0001" ] <- "Max"
cust2[collapsed_var2 == "0000" ] <- "Attrite"
collapsed_var3 <- paste0(RH.dat$Min_12, RH.dat$Med_12, RH.dat$Close_12, RH.dat$Max_12)
cust3 <- collapsed_var3
cust3[collapsed_var3 == "1000" ] <- "Min"
cust3[collapsed_var3 == "0100" ] <- "Med"
cust3[collapsed_var3 == "0010" ] <- "Close"
cust3[collapsed_var3 == "0001" ] <- "Max"
cust3[collapsed_var3 == "0000" ] <- "Attrite"
table(cust1,cust2)
table(cust1)
library( here )
here()
RH.dat <- read.csv( paste0( here(), "custody_flow.csv"), as.is = TRUE, header = TRUE )
RH.dat <- read.csv( paste0( here(), "custody-flow.csv"), as.is = TRUE, header = TRUE )
?here
RH.dat <- read.csv( here( "custody-flow.csv" ), as.is = TRUE, header = TRUE )
RH.dat
library( networkD3 )
library( dplyr )
library( here )
RH.dat <- read.csv( here( "custody-flow.csv" ), as.is = TRUE, header = TRUE )
# A connection data frame is a list of flows with intensity for each flow.
links <- data.frame(
source=c(
# Baseline senders.
"Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   ,
"Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" ,
"Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline",
# 6 Month senders.
"Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   ,
"Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" ,
"Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month",
"Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"
),
target=c(
# 6 Month receivers, from baseline senders.
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
# 12 Month receivers, from 6 Month senders.
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month"
),
value=c(
#
sum( RH.dat$Max_6[ RH.dat$Max == 1 ] ), # max to max
sum( RH.dat$Close_6[ RH.dat$Max == 1 ] ), # max to close
sum( RH.dat$Med_6[ RH.dat$Max == 1 ] ), # max to med
sum( RH.dat$Min_6[ RH.dat$Max == 1 ] ), # max to min
sum( RH.dat$Max[ RH.dat$in_6mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Close == 1 ] ), # max to close
sum( RH.dat$Close_6[ RH.dat$Close == 1 ] ), # close to close
sum( RH.dat$Med_6[ RH.dat$Close == 1 ] ), # close to med
sum( RH.dat$Min_6[ RH.dat$Close == 1 ] ), # close to min
sum( RH.dat$Close[ RH.dat$in_6mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Close_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Med_6[ RH.dat$Med == 1 ] ), # med to med
sum( RH.dat$Min_6[ RH.dat$Med == 1 ] ), # med to min
sum( RH.dat$Med[ RH.dat$in_6mfollowup != 1 ] ), # med to out of sample.
##
#
sum( RH.dat$Max_12[ RH.dat$Max_6 == 1 ] ), # max to max
sum( RH.dat$Close_12[ RH.dat$Max_6 == 1 ] ), # max to close
sum( RH.dat$Med_12[ RH.dat$Max_6 == 1 ] ), # max to med
sum( RH.dat$Min_12[ RH.dat$Max_6 == 1 ] ), # max to min
sum( RH.dat$Max_6[ RH.dat$in_12mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Close_6 == 1 ] ), # max to close
sum( RH.dat$Close_12[ RH.dat$Close_6 == 1 ] ), # close to close
sum( RH.dat$Med_12[ RH.dat$Close_6 == 1 ] ), # close to med
sum( RH.dat$Min_12[ RH.dat$Close_6 == 1 ] ), # close to min
sum( RH.dat$Close_6[ RH.dat$in_12mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Close_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Med_12[ RH.dat$Med_6 == 1 ] ), # med to med
sum( RH.dat$Min_12[ RH.dat$Med_6 == 1 ] ), # med to min
sum( RH.dat$Med_12[ RH.dat$in_12mfollowup != 1 ] ), # med to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Close_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Med_12[ RH.dat$Min_6 == 1 ] ), # min to med
sum( RH.dat$Min_12[ RH.dat$Min_6 == 1 ] ), # min to min
sum( RH.dat$Min_6[ RH.dat$in_12mfollowup != 1 ] ) # min to out of sample.
)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c( as.character( links$source ),
as.character( links$target ) ) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to reformat it.
links$IDsource <- match( links$source, nodes$name )-1
links$IDtarget <- match( links$target, nodes$name )-1
# Add a group that shows movement through custody levels.
links$custody.moves <- as.factor( c(
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"up",  "up",  "up",  "same",  "out"
)
)
# Add a group that shows how people in specific custody levels move:
links$custody.init <- as.factor( c(
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Min","Min","Min","Min","Min"
)
)
# Remove the flows with zero transfers.
links <- links[links$value != 0,]
# Add a 'group' column to each node. Here I decide to put all of them in the same group to make them grey
nodes$custody.moves <- as.factor(c("custody.moves"))
nodes$custody.init <- as.factor(c("custody.init"))
# Give a color for each group:
color.moves <- 'd3.scaleOrdinal() .domain(["same", "up", "down", "out", "custody.moves"]) .range(["#b6ceed", "#da6763", "#5ddaab", "#e0c380", "grey"])'
color.init <- 'd3.scaleOrdinal() .domain(["Max", "Close", "Medium", "Min", "custody.init"]) .range(["#942823", "#cb8630", "#24759a", "#a627a2", "grey"])'
# Make the network.
p <- sankeyNetwork( Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 12,
colourScale=color.moves, LinkGroup="custody.moves", NodeGroup="custody.moves"
)
p
library( networkD3 )
library( dplyr )
library( here )
RH.dat <- read.csv( here( "custody-flow.csv" ), as.is = TRUE, header = TRUE )
# A connection data frame is a list of flows with intensity for each flow.
links <- data.frame(
source=c(
# Baseline senders.
"Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   ,
"Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" ,
"Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline",
# 6 Month senders.
"Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   ,
"Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" ,
"Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month",
"Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"
),
target=c(
# 6 Month receivers, from baseline senders.
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
# 12 Month receivers, from 6 Month senders.
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month"
),
value=c(
#
sum( RH.dat$Max_6[ RH.dat$Max == 1 ] ), # max to max
sum( RH.dat$Close_6[ RH.dat$Max == 1 ] ), # max to close
sum( RH.dat$Med_6[ RH.dat$Max == 1 ] ), # max to med
sum( RH.dat$Min_6[ RH.dat$Max == 1 ] ), # max to min
sum( RH.dat$Max[ RH.dat$in_6mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Close == 1 ] ), # max to close
sum( RH.dat$Close_6[ RH.dat$Close == 1 ] ), # close to close
sum( RH.dat$Med_6[ RH.dat$Close == 1 ] ), # close to med
sum( RH.dat$Min_6[ RH.dat$Close == 1 ] ), # close to min
sum( RH.dat$Close[ RH.dat$in_6mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Close_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Med_6[ RH.dat$Med == 1 ] ), # med to med
sum( RH.dat$Min_6[ RH.dat$Med == 1 ] ), # med to min
sum( RH.dat$Med[ RH.dat$in_6mfollowup != 1 ] ), # med to out of sample.
##
#
sum( RH.dat$Max_12[ RH.dat$Max_6 == 1 ] ), # max to max
sum( RH.dat$Close_12[ RH.dat$Max_6 == 1 ] ), # max to close
sum( RH.dat$Med_12[ RH.dat$Max_6 == 1 ] ), # max to med
sum( RH.dat$Min_12[ RH.dat$Max_6 == 1 ] ), # max to min
sum( RH.dat$Max_6[ RH.dat$in_12mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Close_6 == 1 ] ), # max to close
sum( RH.dat$Close_12[ RH.dat$Close_6 == 1 ] ), # close to close
sum( RH.dat$Med_12[ RH.dat$Close_6 == 1 ] ), # close to med
sum( RH.dat$Min_12[ RH.dat$Close_6 == 1 ] ), # close to min
sum( RH.dat$Close_6[ RH.dat$in_12mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Close_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Med_12[ RH.dat$Med_6 == 1 ] ), # med to med
sum( RH.dat$Min_12[ RH.dat$Med_6 == 1 ] ), # med to min
sum( RH.dat$Med_12[ RH.dat$in_12mfollowup != 1 ] ), # med to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Close_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Med_12[ RH.dat$Min_6 == 1 ] ), # min to med
sum( RH.dat$Min_12[ RH.dat$Min_6 == 1 ] ), # min to min
sum( RH.dat$Min_6[ RH.dat$in_12mfollowup != 1 ] ) # min to out of sample.
)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c( as.character( links$source ),
as.character( links$target ) ) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to reformat it.
links$IDsource <- match( links$source, nodes$name )-1
links$IDtarget <- match( links$target, nodes$name )-1
# Add a group that shows movement through custody levels.
links$custody.moves <- as.factor( c(
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"up",  "up",  "up",  "same",  "out"
)
)
# Add a group that shows how people in specific custody levels move:
links$custody.init <- as.factor( c(
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Min","Min","Min","Min","Min"
)
)
# Remove the flows with zero transfers.
links <- links[links$value != 0,]
# Add a 'group' column to each node. Here I decide to put all of them in the same group to make them grey
nodes$custody.moves <- as.factor(c("custody.moves"))
nodes$custody.init <- as.factor(c("custody.init"))
# Give a color for each group:
color.moves <- 'd3.scaleOrdinal() .domain(["same", "up", "down", "out", "custody.moves"]) .range(["#b6ceed", "#da6763", "#5ddaab", "#e0c380", "grey"])'
color.init <- 'd3.scaleOrdinal() .domain(["Max", "Close", "Medium", "Min", "custody.init"]) .range(["#942823", "#cb8630", "#24759a", "#a627a2", "grey"])'
# Make the network.
p <- sankeyNetwork( Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 12,
colourScale=color.moves, LinkGroup="custody.moves", NodeGroup="custody.moves"
)
p
library( htmlwidgets )
saveWidget(p, paste0( path, "/custody_flow_plot.html" ) )
library( networkD3 )
library( dplyr )
library( here )
RH.dat <- read.csv( here( "custody-flow.csv" ), as.is = TRUE, header = TRUE )
# A connection data frame is a list of flows with intensity for each flow.
links <- data.frame(
source=c(
# Baseline senders.
"Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   , "Max Baseline"   ,
"Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" , "Close Baseline" ,
"Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline", "Medium Baseline",
# 6 Month senders.
"Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   , "Max 6 Month"   ,
"Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" , "Close 6 Month" ,
"Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month", "Medium 6 Month",
"Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"   , "Min 6 Month"
),
target=c(
# 6 Month receivers, from baseline senders.
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
"Max 6 Month", "Close 6 Month", "Medium 6 Month", "Min 6 Month", "Not In 6 Month",
# 12 Month receivers, from 6 Month senders.
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month",
"Max 12 Month", "Close 12 Month", "Medium 12 Month", "Min 12 Month", "Not In 12 Month"
),
value=c(
#
sum( RH.dat$Max_6[ RH.dat$Max == 1 ] ), # max to max
sum( RH.dat$Close_6[ RH.dat$Max == 1 ] ), # max to close
sum( RH.dat$Med_6[ RH.dat$Max == 1 ] ), # max to med
sum( RH.dat$Min_6[ RH.dat$Max == 1 ] ), # max to min
sum( RH.dat$Max[ RH.dat$in_6mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Close == 1 ] ), # max to close
sum( RH.dat$Close_6[ RH.dat$Close == 1 ] ), # close to close
sum( RH.dat$Med_6[ RH.dat$Close == 1 ] ), # close to med
sum( RH.dat$Min_6[ RH.dat$Close == 1 ] ), # close to min
sum( RH.dat$Close[ RH.dat$in_6mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Close_6[ RH.dat$Med == 1 ] ), # med to close
sum( RH.dat$Med_6[ RH.dat$Med == 1 ] ), # med to med
sum( RH.dat$Min_6[ RH.dat$Med == 1 ] ), # med to min
sum( RH.dat$Med[ RH.dat$in_6mfollowup != 1 ] ), # med to out of sample.
##
#
sum( RH.dat$Max_12[ RH.dat$Max_6 == 1 ] ), # max to max
sum( RH.dat$Close_12[ RH.dat$Max_6 == 1 ] ), # max to close
sum( RH.dat$Med_12[ RH.dat$Max_6 == 1 ] ), # max to med
sum( RH.dat$Min_12[ RH.dat$Max_6 == 1 ] ), # max to min
sum( RH.dat$Max_6[ RH.dat$in_12mfollowup != 1 ] ), # max to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Close_6 == 1 ] ), # max to close
sum( RH.dat$Close_12[ RH.dat$Close_6 == 1 ] ), # close to close
sum( RH.dat$Med_12[ RH.dat$Close_6 == 1 ] ), # close to med
sum( RH.dat$Min_12[ RH.dat$Close_6 == 1 ] ), # close to min
sum( RH.dat$Close_6[ RH.dat$in_12mfollowup != 1 ] ), # close to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Close_12[ RH.dat$Med_6 == 1 ] ), # med to close
sum( RH.dat$Med_12[ RH.dat$Med_6 == 1 ] ), # med to med
sum( RH.dat$Min_12[ RH.dat$Med_6 == 1 ] ), # med to min
sum( RH.dat$Med_12[ RH.dat$in_12mfollowup != 1 ] ), # med to out of sample.
#
sum( RH.dat$Max_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Close_12[ RH.dat$Min_6 == 1 ] ), # min to close
sum( RH.dat$Med_12[ RH.dat$Min_6 == 1 ] ), # min to med
sum( RH.dat$Min_12[ RH.dat$Min_6 == 1 ] ), # min to min
sum( RH.dat$Min_6[ RH.dat$in_12mfollowup != 1 ] ) # min to out of sample.
)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c( as.character( links$source ),
as.character( links$target ) ) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to reformat it.
links$IDsource <- match( links$source, nodes$name )-1
links$IDtarget <- match( links$target, nodes$name )-1
# Add a group that shows movement through custody levels.
links$custody.moves <- as.factor( c(
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"same",  "down",  "down",  "down",  "out",
"up",  "same",  "down",  "down",  "out",
"up",  "up",  "same",  "down",  "out",
"up",  "up",  "up",  "same",  "out"
)
)
# Add a group that shows how people in specific custody levels move:
links$custody.init <- as.factor( c(
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Max","Max","Max","Max","Max",
"Close","Close","Close","Close","Close",
"Medium","Medium","Medium","Medium","Medium",
"Min","Min","Min","Min","Min"
)
)
# Remove the flows with zero transfers.
links <- links[links$value != 0,]
# Add a 'group' column to each node. Here I decide to put all of them in the same group to make them grey
nodes$custody.moves <- as.factor(c("custody.moves"))
nodes$custody.init <- as.factor(c("custody.init"))
# Give a color for each group:
color.moves <- 'd3.scaleOrdinal() .domain(["same", "up", "down", "out", "custody.moves"]) .range(["#b6ceed", "#da6763", "#5ddaab", "#e0c380", "grey"])'
color.init <- 'd3.scaleOrdinal() .domain(["Max", "Close", "Medium", "Min", "custody.init"]) .range(["#942823", "#cb8630", "#24759a", "#a627a2", "grey"])'
# Make the network.
p <- sankeyNetwork( Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 12,
colourScale=color.moves, LinkGroup="custody.moves", NodeGroup="custody.moves"
)
p
library( htmlwidgets )
saveWidget(p, paste0( path, "/custody_flow_plot.html" ) )
library( htmlwidgets )
saveWidget(p, paste0( path, "/custody-flow-plot.html" ) )
---
title: "Impact of ChatGPT on Coding Jobs"
# Load necessary library
library(ggplot2)
# Create fictitious data
months <- 1:12
coding_jobs <- c(1000, 950, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450)
# Combine into a data frame
data <- data.frame(Months = months, Coding_Jobs = coding_jobs)
# Plot the decline in coding jobs
ggplot(data, aes(x = Months, y = Coding_Jobs)) +
geom_line(color = "blue") +
geom_point() +
labs(title = "Decline in Coding Jobs Over Time",
x = "Months Since ChatGPT Release",
y = "Number of Coding Jobs") +
theme_minimal()
shiny::runApp('~/Desktop/trash')
require( knitr )
require( rmarkdown )
require( here )
# Creates the html output
render( here( "index.Rmd" ), "html_document" )
# Note that these are in the /topics folder
render( here( "topics/R-basics.Rmd" )            , "html_document" )
render( here( "topics/R-working-with-data.Rmd" ) , "html_document" )
render( here( "topics/R-programming.Rmd" )       , "html_document" )
render( here( "topics/R-data-visualization.Rmd" ), "html_document" )
render( here( "topics/R-markdown.Rmd" )          , "html_document" )
render( here( "topics/R-shiny.Rmd" )             , "html_document" )
render( here( "topics/R-AI.Rmd" )                , "html_document" )
render( here( "topics/R-schedule.Rmd" )          , "html_document" )
# Close this script.
quit( save = "no" )
require( knitr )
require( rmarkdown )
require( here )
# Creates the html output
render( here( "index.Rmd" ), "html_document" )
# Note that these are in the /topics folder
render( here( "topics/R-basics.Rmd" )            , "html_document" )
render( here( "topics/R-working-with-data.Rmd" ) , "html_document" )
render( here( "topics/R-programming.Rmd" )       , "html_document" )
render( here( "topics/R-data-visualization.Rmd" ), "html_document" )
render( here( "topics/R-markdown.Rmd" )          , "html_document" )
render( here( "topics/R-shiny.Rmd" )             , "html_document" )
render( here( "topics/R-AI.Rmd" )                , "html_document" )
render( here( "topics/R-schedule.Rmd" )          , "html_document" )
